
                            Welcome to PCCTS 1.10

                               August 1993


                  Purdue University Electrical Engineering

                                Terence Parr
                                 Will Cohen
                                 Hank Dietz


                                INSTALLATION

     This document describes the installation of PCCTS 1.10 on UNIX
and non-UNIX machines.  The UNIX installation is trivial while the
non-UNIX folks have a bit more work to do as an install script
explicitly for there machine will not exist--they will have to
interpret the install script.

     PCCTS 1.10 includes a number of different programs and examples
in the software release package -- most of which like to live in their
own directories.  The install script will build a standard hierarchy.
Or, if you get the tar file off the ftp site, the hierarchy will be
constructed automatically by tar.

     The PCCTS executables (antlr, dlg) may be placed anywhere the user
wishes but the install script places them in the bin directory created
during installation.

1.0.  UNIX USERS

This section is for UNIX users and describes the most convenient
installation procedure.

1.1.  FORMAT: pccts.tar

To begin installation, the user should create a directory (usually
called pccts) where the PCCTS source subtree is to be created.  Place
the pccts.tar file into this directory and cd into it.  To install
PCCTS, simply type
 
     make

which will build the standard PCCTS directory hierarchy (under the
directory where you ran the install script) and build executable
versions of antlr and dlg.

1.2.  FORMAT: pccts.bag

     To begin installation, the user should create a directory (usually
called pccts) where the PCCTS source subtree is to be created.  Place
the pccts.bag file and the install script into this directory and cd
into it.  To install PCCTS, simply type
 
     sh install

which will build the standard PCCTS directory hierarchy (under the
directory where you ran the install script), "unbag" all of the files
and build executable versions of antlr and dlg.

2.0.  NON-UNIX USERS

     ANTLR was written using portable (we hope), vanilla K&R-style C,
ANSI C, and C++.  It has been successfully ported to a variety of
environments (see the 1.10 release notes).  We do not provide an
installation script explicitly for non-Unix users.  You must interpret
the install script and perform the analogous operations on your
machine.

IMPORTANT NOTE:  You must create the parser.dlg and "touch" scan.c in
                 antlr and dlg directories or the makefiles will try to
                 execute antlr and dlg, which don't exist yet.  The first
                 time, you want only to compile the C files in order to
                 obtain an executable for antlr and dlg.  From this point,
                 a change in antlr.g or dlg_p.g will force antlr/dlg to
                 regenerate themselves.

IMPORTANT NOTE:  See the notes about WORD SIZE below.  You MUST
                 "#define PC" for the preprocessor so that the word size
                 will be 16bits for int's IF you have a machine with
                 this size; e.g. a IBM PC clone.  Our antlr and dlg
                 makefiles take care of this for you if you live on
                 a PC.

     For Mac programmers using MPW (Macintosh Programmer's Workshop),
an "#ifdef MPW" is included to print error messages that can be
"executed" to highlight the error location.  In other words, the line
in the file where the error occured will be highlighted by hitting
"enter" over the error message.  Add "-d MPW" to your list of compile
flags.  See generic.h in antlr directory.

3.0.  EMAIL VERSION RECIPIENTS

     If you received PCCTS via email response from
pccts@ecn.purdue.edu you have one additional installation step to
perform over the ftp folks (and pccts.tar is unavailable).  You will
have received a number of bite-size chunks of pccts which are small
enough to be emailed (~1500 lines each).  You must reconstruct the
PCCTS files before you can begin installation.  In order to rebuild an
original file, you must have "one.c" which will take the chunks and
pack them together.  If you are a non-UNIX type, you must have the
"unbag.c" file which unbags the bags created by our mail archiver.
UNIX folks use the shell to unbag as they would for shar files (this
will be done automatically by the install script).

     To install PCCTS, place all PCCTS mail messages into a pccts
directory, remove the mail headers from one.c.  Then compile one.c
with:

     cc -o one one.c

and then type:

     ./one f1 f2 ... fn

where f1..fn are the parts of PCCTS source sent as chunks (i.e. these
files will be all the files you received NOT including one.c, unbag.c,
README, install and the request acknowledge banner).  There is no need
to remove mail headers from the chunk files and they may appear in any
order.  The subject line of the mail will identify it as a chunk and a
chunk of what file.  The "one" program should be used to put pccts.bag
back together.  You are now in a position to begin normal PCCTS
installation.  All files you receive should go into a pccts directory.

     Note that all files which arrive in "chunks" must be put back
together using "one".  Beware that you do not mix chunks from more
than one original file.  For instance, do not specify all chunks that
you collect from the PCCTS mailbot on the "one" command line unless
you have requested only one original file that was split into multiple
files.  Each chunk knows which original file it is a part of, where it
goes in that file and how many total chunks are required to rebuild
that original.

4.0.  WORD SIZE AND PC USERS

     PCCTS makefiles assume 32-bit integers.  If you have 16-bit
integers, you must turn on preprocessor symbol PC to change wordsize
definitions.  You can add another "#ifdef" for your machine or
specific wordsize (see set.h in support/set and output.c in dlg) if
your machine is really weird.  PC users may simple uncomment the
appropriate section of the makefiles for their PC compiler and comment
out the UNIX section.

                                TUTORIAL

     The advanced tutorial should be placed in a directory at the
same level as antlr, dlg, support etc...  Do a

     sh advtut.bag

to unbag (or use the unbag program) and then type

     make -s all

which will create executables called tut1-tut4.  Naturally, if you got
the tutorials from the ftp site, the tar format of the tutorials can
be obtained for easier installation.

Unfortunately, the tutorials have changed little since the 1.06
release.  With luck, these will be enhanced and an AST tutorial will
appear.

                              NEW FEATURES

The following is a list of the section headers in the file UPDATE110.txt:

1.  Introduction
3.  Semantic Predicates
3.1.  Visible Semantic Predicates
3.2.  Context of Semantic Predicates
3.3.  Failure of predicates
3.  Infinite lookahead and Backtracking
3.1.  Examples
3.2.  Syntactic Predicates
3.2.1.  Syntactic Predicate Form
3.2.2.  Modified LL(k) Parsing Scheme
3.2.3.  Syntactic Predicate Placement
3.2.4.  Nested Syntactic Predicate Invocation
3.2.5.  Grammar Fragments within Syntactic Predicates
3.2.6.  Efficiency
3.2.7.  Resolving Ambiguous C++ Statements
3.2.8.  Revisiting the ML Example
3.2.9.  Syntactic Predicates Effect on Grammar Analysis
3.2.10.  The Effect of Nondeterminism upon Translation and Semantic Predicates
3.2.10.1.  The Effect upon User Actions
3.2.10.2.  The Effect upon Semantic Predicates
3.2.11.  Comparing the Use of Semantic and Syntactic Predicates
3.2.12.  Implementation
4.  DLG Enhancements
5.  Linear-Approximation Lookahead
6.  Faster Compilation of ANTLR-Generated Parsers
7.  Linking Together Multiple ANTLR Parsers
8.  Creating Customized Syntax Error Routines
9.  Lexical Changes to ANTLR Input
10.  New ANTLR Options
11.  ANTLR Generates "Androgynous" Code
12.  Printing out grammars
13.  C Grammar Changes
14.  C++ Now Compiles ANTLR Itself
15.  New Preprocessor Symbol
16.  Attribute Warning
17.  Incompatibilities
18.  Portability


                         MACHINE COMPATIBILITY

PCCTS 1.10 is known to compile "out of the box" on the following
machines and/or operating systems:

o  DECSTATION 5000

o  SGI, Running IRIX 4.0.5

o  Sun SparcStation (cc, gcc, g++, Cfront)

o  DOS and OS/2, Microsft C 6.0, 16 bit

o  DOS and OS/2, Borland C/C++, 16 bit

o  OS/2, IBM C-Set/2, 32 bit

o  VAX C under VMS

o  Linux SLS 0.99, gcc/g++


                           INCOMPATIBILITIES

     Please see the release notes.
