.TH PCCTS 1 "August 1993" "PCCTS" "PCCTS Manual Pages"
.SH NAME
PCCTS \- The Purdue Compiler Construction Tool Set
.SH DESCRIPTION
.PP
PCCTS is a set of public domain software tools designed to facilitate
the implementation of compilers and other translation systems.  These
tools currently include \fIantlr\fP, \fIdlg\fP and support code.  In
many ways, PCCTS is similar to a highly integrated version of YACC
[Joh78] and LEX [Les75]; where \fIantlr\fP (ANother Tool for Language
Recognition) corresponds to YACC and \fIdlg\fP (DFA-based Lexical
analyzer Generator) functions like LEX.  However, PCCTS has many
additional features which make it easier to use for a wider range of
translation problems.
.PP
PCCTS grammars contain specifications for lexical and syntactic
analysis, intermediate-form construction and error reporting.  Rules
may employ Extended Backus Naur Form (EBNF) grammar constructs and may
define parameters, return values and local variables.  Languages
described in PCCTS are recognized via Strong LL(k) parsers constructed
in pure, human-readable, C code.  As a result, standard debugging
tools can be used to trace and debug PCCTS parsers.  Breakpoints can
be set so that parser execution stops before or after grammar
fragments of interest have been recognized.
.PP
PCCTS grammars may contain predicates which allow parsing to be a
function of semantics as well as syntax\ \(em context-sensitive
grammars.  Backtracking can also be specified to recognized non-LL(k)
and non-LALR(k) constructs.  In addition, PCCTS supports
intermediate-form (such as expression-trees) construction via a
flexible Abstract-Syntax Tree (AST) mechanism which allows trees to be
built explicitly or automatically.  The user explicitly creates trees
via a LISP-like tree constructor or directs the automatic tree
construction facility via simple grammar directives.  AST nodes are
user-defined and are generally a function of attributes.  A default
transformation from attributes (\fB$\fP-variables) to AST nodes can be
specified.  Alternatively, each tree node can be defined explicitly
via an AST node constructor.
.SH INSTALLATION
.PP
PCCTS includes a number of different programs and examples in the
software release package\(emmost of which like to live in their own
directories.  The install script will build a standard hierarchy.  The
PCCTS executables (\fIantlr\fP, \fIdlg\fP) may be placed anywhere the
user wishes but the install script places them in the bin directory
created during installation.
.PP
To begin installation, the user should create a directory (usually
called \fBpccts\fP) where the PCCTS source subtree is to be created.
If you have the \fBpccts.tar\fP file, then simply place it into the
subdirectory and untar with:
.LP
\fBtar xvf pccts.tar\fP
.LP
Then say \*Qmake\*U.  If you have the \fBpccts.bag\fP as sent via
email by our mail server, place it and the install script into the
subdirectory.  To install PCCTS, simply type
.LP
\fBsh install\fP
.LP
which will build the standard PCCTS directory hierarchy (under the
directory where you ran the install script), \fBunbag\fP all of the
files and build executable versions of \fIantlr\fP and \fIdlg\fP.
.PP
The examples associated with PCCTS have makefile variables called
\fBANTLR\fP, \fBDLG\fP etc... which must be set according to your
personal directory structure before \fImake\fP'ing.  Some variables
point to the PCCTS executables if the \fBPATH\fP environment variable
does not include your \fBbin\fP directory.  Also, there are variables
that point to PCCTS include directories and must be changed if you
deviate from the standard PCCTS installation hierarchy.  \fIantlr\fP
and \fIdlg\fP can be built without executable versions of themselves
(\fIantlr\fP and \fIdlg\fP are written in themselves).
.SH "GETTING STARTED"
.PP
A C program called \fBgenmk.c\fP is available in the \fBsupport\fP
directory of the PCCTS release which has the following usage:
.LP
\fBgenmk project f1.g f2.g ... fn.g\fP
.LP
It generates a makefile that creates an executable, \fBproject\fP,
from a set of grammar files.  Typing \fBmake\fP will create the
executable once the makefile has been modified to indicate where the
\fIantlr\fP and \fIdlg\fP executables reside.
.SH "SEE ALSO"
.LP
dlg(1), antlr(1)

